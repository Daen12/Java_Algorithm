package solving_club;

import java.util.Scanner;

public class Q5656_벽돌깨기_D4 {
	// 벽돌깨면 적혀있는 수만큼 터진 후에 빈공간만큼 내려온다.
	// 제거되는 범위 내에 있는 벽돌은 동시에 제거된다.
	// 1.제거하는 함수
	// 2.만약 제거하는 범위에 숫자가 1 이상이라면, 재귀로 다시 제거
	// 3.제거가 끝난 후 밑에 0이 있으면 그만큼 shift해주는 함수
	static int[][] map;
	static int W, H;
	static int[] dc = { -1, 0, 1, 0 };
	static int[] dr = { 0, -1, 0, 1 };

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int T = in.nextInt();
		for (int t = 1; t <= T; t++) {
			int N = in.nextInt();
			W = in.nextInt();// c
			H = in.nextInt();// r
			map = new int[H][W];
			for (int r = 0; r < H; r++) {
				for (int c = 0; c < W; c++) {
					map[r][c] = in.nextInt();
				}
			}

			// 구슬 shoot시 해당 칼럼에 구슬이 있는지.. 여기서 판단?
		}
	}

	public static void shoot(int C) {// 어떤 칼럼에 쏠지
		if (isR(C)) {// 해당칼럼에 구슬이 있으면
			int R = findR(C);// 구슬 행 번호
		}

	}
	public static void repeat(int R, int C) {
		int num = map[R][C];// 구슬 숫자
		map[R][C] = 0; // 0만들고
		int spread = 1;
		while (spread <= num) {
			// 해당 자리의 4방 탐색
			for (int d = 0; d < 4; d++) {
				int nr = R + dr[d];
				int nc = C + dc[d];
				if (nr < 0 || nc < 0 || nr >= H || nc >= W)
					continue;
			}
			//4방탐색 후 spread++
			spread++;
		}
	}

	public static int findR(int C) {
		// c의 행 인덱스 = 가장 먼저 0이 아닌수
		for (int r = 0; r < H; r++) {
			if (map[r][C] != 0) {
				return r;
			}
			if (r == H - 1) {// 행 끝까지 내려간 후 if만난 경우 = 해당칼럼모두 0

			}
		}
		return -1;
	}

	public static boolean isR(int C) {
		// c의 행 인덱스 = 가장 먼저 0이 아닌수
		for (int r = 0; r < H; r++) {
			if (map[r][C] != 0) {
				return true;
			}
		}
		return false;
	}
}
